pipeline {

    agent any
    
    stages{
        
        stage ('Checkout'){
            steps{
                checkout scm
                sh 'git --version'
                sh 'docker -v'
                sh 'echo "Branch name: ${GIT_BRANCH}"'
            }
        }

        stage ('Declare Variables'){
            steps {
                script{
                    switch(env.GIT_BRANCH) {
                        case 'origin/qa':
                            env.DEPLOY_ENV = "qa"
                            break
                        case 'origin/deployment':
                            env.DEPLOY_ENV = "dev"
                            break
                        default:
                            env.DEPLOY_ENV = "dev"
                            break 
                    }
                }
                sh 'echo "${DEPLOY_ENV}"'
            }
        }

        stage ('Build'){
            environment {
                ENV_FILE = credentials("recruitment-portal-${DEPLOY_ENV}-env-file")
            }
            steps{
                sh 'DEPLOY_ENV=${DEPLOY_ENV} docker-compose -f docker/docker-compose.yml --env-file ${ENV_FILE} build '
            }
        }

        stage ('Save'){
            steps{ 
                sh 'docker save nimap/therecruiter:django-${DEPLOY_ENV} nimap/therecruiter:nginx-qa -o images.tar' 
            }  
        }

        stage ('Transfer'){
            environment {
                ENV_FILE = credentials("recruitment-portal-${DEPLOY_ENV}-env-file")
                REMOTE_HOST = credentials("recruitment-portal-${DEPLOY_ENV}-remote-host")
                REMOTE_USER = credentials("recruitment-portal-${DEPLOY_ENV}-remote-user")
                RWD = "deployments/recruitment-portal/${DEPLOY_ENV}"
            }
            steps {
                sshagent(["recruitment-portal-${DEPLOY_ENV}-remote-server-ssh-creds"]) {

                    // Check SSH Connection
                    sh 'ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "ls"'
                    sh 'ssh ${REMOTE_USER}@${REMOTE_HOST} "rm -rf ${RWD}"'
                    sh 'ssh ${REMOTE_USER}@${REMOTE_HOST} "mkdir -p ${RWD}"'

                    // Transfer required files on server
                    sh 'scp -r images.tar ${REMOTE_USER}@${REMOTE_HOST}:${RWD}/'
                    sh 'scp -r docker/docker-compose.yml ${REMOTE_USER}@${REMOTE_HOST}:${RWD}/'
                    sh 'scp -r docker/compose/qa.yml ${REMOTE_USER}@${REMOTE_HOST}:${RWD}/'
                    sh 'scp -r ${ENV_FILE} ${REMOTE_USER}@${REMOTE_HOST}:${RWD}/'

                }
            }       
        }

        stage ('Deploy'){

            environment {
                REMOTE_HOST = credentials("recruitment-portal-${DEPLOY_ENV}-remote-host")
                REMOTE_USER = credentials("recruitment-portal-${DEPLOY_ENV}-remote-user")
                RWD = "deployments/recruitment-portal/${DEPLOY_ENV}"
            }

            steps {
                sshagent(["recruitment-portal-${DEPLOY_ENV}-remote-server-ssh-creds"]) {
                    // Deploy application with docker compose
                    sh 'ssh ${REMOTE_USER}@${REMOTE_HOST} "cd ${RWD}/ && DEPLOY_ENV=${DEPLOY_ENV} docker load -i images.tar"'
                    sh 'ssh ${REMOTE_USER}@${REMOTE_HOST} "cd ${RWD}/ && DEPLOY_ENV=${DEPLOY_ENV} docker-compose -p recruitment-portal-${DEPLOY_ENV} down"'
                    sh 'ssh ${REMOTE_USER}@${REMOTE_HOST} "cd ${RWD}/ && DEPLOY_ENV=${DEPLOY_ENV} docker-compose -f docker-compose.yml -f ${DEPLOY_ENV}.yml -p recruitment-portal-${DEPLOY_ENV} up --no-build -d"'
                }
            }       
        }
    }
}

